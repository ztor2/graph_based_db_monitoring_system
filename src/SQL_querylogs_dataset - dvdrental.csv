query,action,detail,ref,"쿼리
작동 여부",쿼리 적합성,"쿼리 처리 소요시간(ms)
(최적화 전)","쿼리 처리 소요시간(ms)
(최적화 후)",비고,,,최적화 전,최적화 후
"SELECT customer_id, COUNT(rental_id) AS total_rentals
FROM rental
GROUP BY customer_id;",고객별 총 대여 횟수 조회,rental 테이블에서 고객별로 rental_id를 카운트,rental,O,,,-,,,쿼리 처리 소요시간 평균(ms),,
"SELECT inventory.film_id, AVG(return_date - rental_date) AS average_rental_duration
FROM rental
JOIN inventory ON rental.inventory_id = inventory.inventory_id
GROUP BY inventory.film_id;",각 영화의 평균 대여 기간 계산,rental 테이블과 inventory 테이블을 조인하여 영화별로 대여 기간의 평균을 계산,"rental, inventory",O,,,-,,,,,
"SELECT customer_id, genre, MAX(genre_count) AS max_genre_count
FROM (
  SELECT rental.customer_id, category.name AS genre, COUNT(*) AS genre_count
  FROM rental
  JOIN inventory ON rental.inventory_id = inventory.inventory_id
  JOIN film_category ON inventory.film_id = film_category.film_id
  JOIN category ON film_category.category_id = category.category_id
  GROUP BY rental.customer_id, category.name
) AS genre_counts
GROUP BY customer_id;",각 고객별로 가장 많이 대여한 장르 조회,"RANK() 함수로 각 고객별로 장르 대여 횟수에 따라 순위를 매김.  PARTITION BY rental.customer_id는 결과를 고객별로 나누고, ORDER BY COUNT(*) DESC는 대여 횟수를 기준으로 순위를 내림차순으로 매김. WHERE rank = 1을 통해 각 고객별로 대여 횟수가 가장 많은 장르만을 선택","rental, inventory, film_category, category",O,,,-,,,,,
"SELECT EXTRACT(YEAR FROM rental_date) AS rental_year, EXTRACT(MONTH FROM rental_date) AS rental_month, COUNT(rental_id) AS total_rentals
FROM rental
GROUP BY rental_year, rental_month;",모든 고객의 대여 기록이 있는 월별 대여 횟수,rental 테이블에서 연도와 월을 추출하여 그 기간 동안의 총 대여 횟수를 집계,rental,O,,,-,,,,,
"SELECT film.film_id, title, SUM(amount) AS total_revenue
FROM payment
JOIN rental ON payment.rental_id = rental.rental_id
JOIN inventory ON rental.inventory_id = inventory.inventory_id
JOIN film ON inventory.film_id = film.film_id
GROUP BY film.film_id, title;","각 영화에 대한 총 수익 조회

","payment, rental, inventory, film 테이블을 조인하여 각 영화의 수익을 계산","payment, rental, inventory, film",O,,,-,,,,,
"SELECT customer_id, inventory.film_id, title, MAX(rental_date) AS last_rental_date
FROM rental
JOIN inventory ON rental.inventory_id = inventory.inventory_id
JOIN film ON inventory.film_id = film.film_id
GROUP BY customer_id, inventory.film_id, title;","각 고객별 마지막 대여 영화
","inventory 테이블에서 film_id를 선택하여 영화 정보를 연결하고, 각 고객과 영화별로 그룹화하여 가장 최근의 대여 날짜를 조회","rental, inventory, film_category, category",O,,,-,film_id 컬럼의 출처가 불분명한 파트 존재,,,,
"SELECT film_id, AVG(rental_count) AS avg_rental_count, AVG(revenue) AS avg_revenue
FROM (
  SELECT film.film_id, COUNT(rental.rental_id) AS rental_count, SUM(payment.amount) AS revenue
  FROM film
  JOIN inventory ON film.film_id = inventory.film_id
  JOIN rental ON inventory.inventory_id = rental.inventory_id
  JOIN payment ON rental.rental_id = payment.rental_id
  GROUP BY film.film_id
) AS film_stats
GROUP BY film_id;",모든 영화의 평균 대여 횟수와 평균 수익,"여러 테이블을 조인하여 각 영화의 대여 횟수와 수익을 계산한 후, 이를 평균내어 결과를 도출","film, inventory, rental, payment",O,,,-,,,,,
"SELECT customer_id, SUM(amount) AS total_spent
FROM payment
GROUP BY customer_id
ORDER BY total_spent DESC
LIMIT 10;",고객별 총 지출 금액 상위 10명,"payment 테이블에서 고객별로 지출 금액을 합산하고, 이를 내림차순으로 정렬하여 상위 10명을 표시",payment,O,,,-,,,,,
"SELECT category.name AS category, AVG(return_date - rental_date) AS average_rental_duration
FROM rental
JOIN inventory ON rental.inventory_id = inventory.inventory_id
JOIN film_category ON inventory.film_id = film_category.film_id
JOIN category ON film_category.category_id = category.category_id
GROUP BY category.name;","각 카테고리별 평균 대여 기간
","rental, inventory, film_category, category 테이블을 조인하여 각 카테고리별로 평균 대여 기간을 집계","rental, inventory, film_category, category",O,,,-,,,,,
"SELECT customer_id, store_id, COUNT(store_id) AS visit_count
FROM rental
JOIN staff ON rental.staff_id = staff.staff_id
GROUP BY customer_id, store_id
ORDER BY visit_count DESC;",고객별로 가장 자주 방문한 스토어,"rental과 staff 테이블을 조인하여 고객별로 각 스토어 방문 횟수를 계산하고, 가장 많이 방문한 스토어를 조회","rental, staff",O,,,-,,,,,
"SELECT store.store_id, SUM(payment.amount) AS total_revenue
FROM payment
JOIN staff ON payment.staff_id = staff.staff_id
JOIN store ON staff.store_id = store.store_id
GROUP BY store.store_id;",각 스토어의 총 수익,"payment, staff, store 테이블을 조인하여 각 스토어의 총 수익을 계산","payment, staff, store",O,,,-,,,,,
"SELECT actor.actor_id, actor.first_name, actor.last_name, COUNT(film_actor.actor_id) AS total_rentals
FROM rental
JOIN inventory ON rental.inventory_id = inventory.inventory_id
JOIN film_actor ON inventory.film_id = film_actor.film_id
JOIN actor ON film_actor.actor_id = actor.actor_id
GROUP BY actor.actor_id
ORDER BY total_rentals DESC
LIMIT 10;",가장 많이 대여된 배우 상위 10명,"rental, inventory, film_actor, actor 테이블을 조인하여 배우별 대여 횟수를 집계하고, 이를 내림차순으로 정렬","rental, inventory, film_actor, actor",O,,,-,,,,,
"SELECT customer_id, SUM(film.length) AS total_length
FROM rental
JOIN inventory ON rental.inventory_id = inventory.inventory_id
JOIN film ON inventory.film_id = film.film_id
GROUP BY customer_id;","고객별 대여한 모든 영화의 총 실행 시간
","rental, inventory, film 테이블을 조인하여 고객별로 영화의 실행 시간을 합산","rental, inventory, film",O,,,-,,,,,
"SELECT category.name AS category, film.title AS film_title, COUNT(rental.rental_id) AS rental_count
FROM rental
JOIN inventory ON rental.inventory_id = inventory.inventory_id
JOIN film ON inventory.film_id = film.film_id
JOIN film_category ON film.film_id = film_category.film_id
JOIN category ON film_category.category_id = category.category_id
GROUP BY category.name, film.title
ORDER BY category.name, rental_count DESC;","각 카테고리별로 가장 많이 대여된 영화

","여러 테이블을 조인하여 카테고리별로 각 영화의 대여 횟수를 집계하고, 각 카테고리 내에서 가장 대여 횟수가 많은 영화를 조회","rental, inventory, film, film_category, category",O,,,-,,,,,
"SELECT COUNT(DISTINCT film.film_id) AS total_films_rented, AVG(film.rental_rate) AS average_rental_rate
FROM rental
JOIN inventory ON rental.inventory_id = inventory.inventory_id
JOIN film ON inventory.film_id = film.film_id;",모든 고객이 대여한 영화의 총 개수와 평균 가격,고객이 대여한 모든 영화의 총 개수와 평균 대여 가격을 조회,"rental, inventory, film",O,,,-,,,,,
"SELECT category.name, AVG(film.rental_rate) AS average_rental_rate
FROM category
JOIN film_category ON category.category_id = film_category.category_id
JOIN film ON film_category.film_id = film.film_id
GROUP BY category.name;
",각 카테고리별 평균 대여료,각 category의 film들에 대한 rental_rate의 평균을 구하여 장르별로 비교,"category, film_category, film",O,,,-,,,,,
"SELECT customer_id, film.title, COUNT(rental.rental_id) AS rental_count
FROM rental
INNER JOIN inventory ON rental.inventory_id = inventory.inventory_id
INNER JOIN film ON inventory.film_id = film.film_id
GROUP BY customer_id, film.title
ORDER BY rental_count DESC;",각 고객별로 가장 많이 대여한 영화의 제목,"customer별로 대여 횟수를 계산하고, 가장 높은 대여 횟수를 가진 film의 title을 반환",,O,,,-,,,,,
"SELECT category.name AS category_name, film.title, film.length AS min_length
FROM film
JOIN film_category ON film.film_id = film_category.film_id
JOIN category ON film_category.category_id = category.category_id
JOIN (
    SELECT film_category.category_id, MIN(film.length) AS min_length
    FROM film
    JOIN film_category ON film.film_id = film_category.film_id
    GROUP BY film_category.category_id
) AS min_length_films ON film_category.category_id = min_length_films.category_id AND film.length = min_length_films.min_length;
",각 카테고리별로 가장 짧은 영화,"내부 쿼리(subquery)에서 각 카테고리별로 가장 짧은 영화의 길이를 조회. 외부 쿼리에서 film, film_category, category 테이블을 조인하고, 내부 쿼리의 결과를 이용해 각 카테고리에서 가장 짧은 영화의 정보를 선택.",,O,,,-,,,,,
"SELECT inventory.film_id, COUNT(rental.rental_id) AS rental_count
FROM rental
JOIN inventory ON rental.inventory_id = inventory.inventory_id
WHERE rental.rental_date BETWEEN DATE_TRUNC('year', CURRENT_DATE) - INTERVAL '1 year' AND DATE_TRUNC('year', CURRENT_DATE)
GROUP BY inventory.film_id
",지난 1년 동안 가장 많이 대여된 영화의 ID와 대여 횟수,"rental 테이블과 inventory 테이블을 조인하여 각 영화(film_id)의 대여 횟수(rental_count)를 계산하고, 그 중 가장 높은 대여 횟수를 가진 영화를 선택",,O,,,,,,,,
"SELECT film.title, SUM(payment.amount) AS total_income
FROM film
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
JOIN payment ON rental.rental_id = payment.rental_id
GROUP BY film.title;",각 영화의 총 대여 수익,"각 영화가 얼마나 많은 수익을 창출했는지 알아보기 위해 film, inventory, rental, payment 테이블을 조인",,O,,,,,,,,
"SELECT AVG(return_date - rental_date) AS average_rental_duration
FROM rental;",모든 고객의 평균 대여 기간, rental_date와 return_date의 차이를 평균내어 대여 기간의 평균을 계산,,O,,,,,,,,
"SELECT store.store_id, COUNT(rental.rental_id) AS rental_count
FROM store
JOIN inventory ON store.store_id = inventory.store_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY store.store_id;",각 스토어별 대여 횟수,store에서 발생한 rental 건수를 카운트하여 store별 대여 횟수를 파악,,O,,,,,,,,
"SELECT actor.actor_id, actor.first_name, actor.last_name, COUNT(film_actor.film_id) AS film_count
FROM actor
JOIN film_actor ON actor.actor_id = film_actor.actor_id
GROUP BY actor.actor_id, actor.first_name, actor.last_name;",각 배우별 출연한 영화의 수,actor와 film 간의 관계를 나타내는 film_actor 테이블을 사용하여 각 actor별로 출연한 film의 수를 집계,,O,,,,,,,,
"SELECT film.title, COUNT(rental.rental_id) AS rental_count
FROM film
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY film.title
ORDER BY rental_count DESC
LIMIT 1;",가장 많이 대여된 영화의 제목과 대여 횟수,대여 횟수가 가장 많은 film을 상위에서 선택,,O,,,,,,,,
"SELECT customer_id, SUM(amount) AS total_payment
FROM payment
GROUP BY customer_id;","각 고객별 총 대여료 조회

",각 고객별로 지불한 총 대여료를 조회. payment 테이블에서 customer_id 별로 amount를 합산,,O,,,,,,,,
"SELECT actor.actor_id, CONCAT(actor.first_name, ' ', actor.last_name) AS actor_name, film.title
FROM actor
JOIN film_actor ON actor.actor_id = film_actor.actor_id
JOIN film ON film_actor.film_id = film.film_id
WHERE CONCAT(actor.first_name, ' ', actor.last_name) = 'Matthew Johansson';",특정 배우가 출연한 영화 목록 조회,"Matthew Johansson라는 배우가 출연한 모든 영화의 목록을 조회. actor, film_actor, film 테이블을 조인하여 배우의 이름과 출연한 영화의 제목을 표시",,O,,,,,,,,
"SELECT film.title, COUNT(rental.rental_id) AS rental_count
FROM rental
JOIN inventory ON rental.inventory_id = inventory.inventory_id
JOIN film ON inventory.film_id = film.film_id
GROUP BY film.title
ORDER BY rental_count DESC
LIMIT 10;","가장 인기 있는 영화 10개 조회


","rental, inventory, film 테이블을 조인하여 영화별 대여 횟수를 계산하고, 가장 많이 대여된 상위 10개의 영화를 조회. 결과는 대여 횟수가 많은 순으로 정렬",,O,,,,,,,,
"SELECT category.name AS category_name,
       AVG(rental.return_date - rental.rental_date) AS average_rental_duration
FROM category
JOIN film_category ON category.category_id = film_category.category_id
JOIN film ON film_category.film_id = film.film_id
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
WHERE rental.return_date IS NOT NULL
GROUP BY category.name;","각 카테고리별 평균 영화 대여 기간 조회

","rental.return_date - rental.rental_date 연산을 통해 대여 기간을 구하고, AVG 함수로 각 카테고리별 평균 대여 기간을 계산. WHERE 절은 rental.return_date가 NULL이 아닌 레코드만 고려. 마지막으로, GROUP BY category.name을 사용하여 각 카테고리별로 결과를 그룹화",,O,,,,,,,,
"WITH ranked_categories AS (
  SELECT 
    rental.customer_id, 
    category.name AS category_name, 
    COUNT(*) AS category_count,
    RANK() OVER (PARTITION BY rental.customer_id ORDER BY COUNT(*) DESC) AS rank
  FROM rental
  JOIN inventory ON rental.inventory_id = inventory.inventory_id
  JOIN film ON inventory.film_id = film.film_id
  JOIN film_category ON film.film_id = film_category.film_id
  JOIN category ON film_category.category_id = category.category_id
  GROUP BY rental.customer_id, category.name
)
SELECT 
  customer.customer_id, 
  CONCAT(customer.first_name, ' ', customer.last_name) AS full_name, 
  category_name AS favorite_category, 
  category_count AS max_rental_count
FROM ranked_categories
JOIN customer ON ranked_categories.customer_id = customer.customer_id
WHERE rank = 1
ORDER BY customer.customer_id;",각 고객별로 가장 많이 대여한 카테고리와 그 카테고리에서의 대여 횟수,"RANK()를 사용하여 각 고객별로 가장 많이 대여한 카테고리를조회. PARTITION BY는 고객별로 데이터를 분할하고, ORDER BY COUNT(*) DESC는 각 카테고리별 대여 횟수를 내림차순으로 정렬하여 순위를 매김. 마지막으로, 외부 쿼리에서 rank = 1 조건을 사용해 각 고객이 가장 많이 대여한 카테고리만을 선택",,O,,,,,,,,
"SELECT actor.first_name, actor.last_name, AVG(film.rental_rate) AS average_rental_rate
FROM actor
JOIN film_actor ON actor.actor_id = film_actor.actor_id
JOIN film ON film_actor.film_id = film.film_id
GROUP BY actor.actor_id;",특정 배우가 출연한 영화들의 평균 대여료 조회,"actor, film_actor, film 테이블을 조인하여 특정 배우가 출연한 영화들의 평균 대여료를 계산. 결과를 그룹화하여 평균 대여료를 표시",,O,,,,,,,,
"SELECT store.store_id, SUM(payment.amount) AS total_revenue
FROM store
JOIN staff ON store.store_id = staff.store_id
JOIN payment ON staff.staff_id = payment.staff_id
GROUP BY store.store_id;",각 스토어별 총 수익 조회,"store, staff, payment 테이블을 조인하여 각 스토어별로 수익을 합산. SUM() 함수를 사용해 각 스토어의 총 수익을 계산하고, 결과는 스토어 ID별로 그룹화하여 표시",,O,,,,,,,,
"SELECT customer.customer_id, CONCAT(customer.first_name, ' ', customer.last_name) AS full_name, MAX(rental.rental_date) AS last_rental_date
FROM customer
JOIN rental ON customer.customer_id = rental.customer_id
GROUP BY customer.customer_id;","고객별 마지막 대여 정보 조회
",고객이 마지막으로 영화를 대여한 날짜를 조회. MAX() 함수를 사용하여 각 고객별 최신 대여 날짜를 조회,,O,,,,,,,,
"SELECT category.name AS category_name, film.title, COUNT(rental.rental_id) AS rental_count
FROM category
JOIN film_category ON category.category_id = film_category.category_id
JOIN film ON film_category.film_id = film.film_id
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY category.name, film.title
ORDER BY category.name, rental_count DESC;","가장 많이 대여된 영화의 카테고리별 순위 조회

","각 카테고리별로 가장 많이 대여된 영화를 조회. 영화는 대여 횟수에 따라 내림차순으로 정렬되며, 결과는 카테고리별로 그룹화",,O,,,,,,,,
"SELECT film.title, COUNT(rental.rental_id) AS rental_count
FROM film
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
WHERE rental.rental_date BETWEEN '2006-01-01' AND '2006-12-31'
GROUP BY film.title
ORDER BY rental_count DESC
LIMIT 10;","특정 기간 동안의 대여 횟수가 가장 높은 영화 조회

","특정 기간(예: 2006년) 동안 가장 많이 대여된 영화를 조회. 이는 WHERE 절을 사용하여 대여 날짜를 필터링하고, 그 결과를 대여 횟수에 따라 정렬",,O,,,,,,,,
"SELECT customer.customer_id, CONCAT(customer.first_name, ' ', customer.last_name) AS full_name, SUM(payment.amount) AS total_amount_paid
FROM customer
JOIN payment ON customer.customer_id = payment.customer_id
GROUP BY customer.customer_id
ORDER BY total_amount_paid DESC;",각 고객별 지불한 총 금액 조회,"SUM() 함수를 사용해 각 고객별 지불한 금액을 합산하고, 결과는 지불 금액이 많은 순으로 정렬",,O,,,,,,,,
"SELECT actor.first_name, actor.last_name, COUNT(film_actor.film_id) AS film_count
FROM actor
JOIN film_actor ON actor.actor_id = film_actor.actor_id
GROUP BY actor.actor_id
ORDER BY film_count DESC;",각 배우가 출연한 영화 수 조회,"배우별로 출연한 영화의 수를 계산. 각 배우는 film_actor 테이블을 통해 출연 영화와 연결되어 있으며, 결과는 출연한 영화 수에 따라 내림차순으로 정렬",,O,,,,,,,,
"SELECT actor.first_name, actor.last_name, film.title
FROM actor
JOIN film_actor ON actor.actor_id = film_actor.actor_id
JOIN film ON film_actor.film_id = film.film_id
WHERE actor.first_name = 'Penelope' AND actor.last_name = 'Guiness';","특정 배우가 출연한 모든 영화 조회

",특정 배우(Penelope Guiness)가 출연한 모든 영화의 제목을 조회. 조건절을 사용하여 특정 배우를 지정,,O,,,,,,,,
"SELECT customer.customer_id, customer.first_name, customer.last_name, address.address, city.city
FROM customer
JOIN address ON customer.address_id = address.address_id
JOIN city ON address.city_id = city.city_id;","모든 고객의 주소와 도시 정보 조회

","고객의 성명, 주소, 그리고 도시 정보를 조회. address 및 city 테이블을 조인하여 고객의 위치 정보를 확인",,O,,,,,,,,
"SELECT city.city, COUNT(customer.customer_id) AS customer_count
FROM customer
JOIN address ON customer.address_id = address.address_id
JOIN city ON address.city_id = city.city_id
GROUP BY city.city;","각 도시별 고객 수 조회

",도시별로 등록된 고객 수를 계산. 결과는 각 도시에 등록된 고객 수에 따라 그룹화,,O,,,,,,,,
"SELECT SUM(film.rental_rate) AS total_rental_income
FROM film;","모든 영화의 대여료 합계 조회

",모든 영화의 대여료를 합산. 전체 영화 컬렉션에서 예상되는 수익을 계산,,O,,,,,,,,
"SELECT customer.customer_id, CONCAT(customer.first_name, ' ', customer.last_name) AS full_name, AVG(film.length) AS average_length
FROM customer
JOIN rental ON customer.customer_id = rental.customer_id
JOIN inventory ON rental.inventory_id = inventory.inventory_id
JOIN film ON inventory.film_id = film.film_id
GROUP BY customer.customer_id;",고객별 대여한 영화의 평균 길이 조회,"ustomer, rental, inventory, film 테이블을 조인하여 고객이 대여한 영화들의 길이 평균을 계산. 각 고객별로 결과를 그룹화하고 평균 길이(average_length)를 반환",,O,,,,,,,,
"SELECT film.title, film.release_year
FROM film
JOIN film_actor ON film.film_id = film_actor.film_id
JOIN actor ON film_actor.actor_id = actor.actor_id
WHERE actor.first_name = 'Penelope' AND actor.last_name = 'Guiness'
ORDER BY film.release_year;","특정 배우가 출연한 모든 영화의 제목과 출시 연도 조회

","film, film_actor, actor 테이블을 조인하여 특정 배우(예: Penelope Guiness)가 출연한 모든 영화의 제목(title)과 출시 연도(release_year)를 조회. 결과는 출시 연도별로 정렬",,O,,,,,,,,
"SELECT category.name AS genre, COUNT(rental.rental_id) AS rental_count
FROM category
JOIN film_category ON category.category_id = film_category.category_id
JOIN film ON film_category.film_id = film.film_id
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY category.name
ORDER BY rental_count DESC
LIMIT 5;","모든 고객이 대여한 영화 중 가장 인기 있는 장르 상위 5개 조회

","category, film_category, film, inventory, rental 테이블을 조인하여 대여 횟수를 기준으로 가장 인기 있는 영화 장르 상위 5개를 조회. 각 장르별 대여 횟수(rental_count)를 계산하고, 대여 횟수가 많은 순서로 결과를 정렬",,O,,,,,,,,
"SELECT title, release_year, length
FROM film
WHERE release_year = 2006
ORDER BY length DESC
LIMIT 1;","특정 연도에 출시된 영화 중 가장 긴 영화 조회

","film 테이블에서 2006년에 출시된 영화 중 가장 긴 영화의 제목(title), 출시 연도(release_year), 길이(length)를 조회. 길이가 가장 긴 영화를 찾기 위해 결과를 길이에 따라 내림차순으로 정렬",,O,,,,,,,,
"SELECT staff.staff_id, CONCAT(staff.first_name, ' ', staff.last_name) AS full_name, SUM(payment.amount) AS total_sales
FROM staff
JOIN payment ON staff.staff_id = payment.staff_id
GROUP BY staff.staff_id;","모든 스토어에서 각 직원별 총 판매액 조회

","staff, payment 테이블을 조인하여 각 직원별로 총 판매액(total_sales)을 계산. 결과는 직원별로 그룹화하여 총 판매액 표시",,O,,,,,,,,
"SELECT customer.customer_id, film.title, COUNT(rental.rental_id) AS rental_count
FROM rental
JOIN customer ON rental.customer_id = customer.customer_id
JOIN inventory ON rental.inventory_id = inventory.inventory_id
JOIN film ON inventory.film_id = film.film_id
GROUP BY customer.customer_id, film.title
ORDER BY customer.customer_id, rental_count DESC;","각 고객이 가장 많이 대여한 영화의 제목과 해당 영화의 대여 횟수 조회
",각 고객(customer)별로 가장 많이 대여한 영화(film)와 그 영화의 대여 횟수를 조회. 고객별로 그룹화하고 대여 횟수(rental_count)에 따라 내림차순으로 정렬하여 각 고객이 가장 많이 대여한 영화를 탐색,,O,,,,,,,,
"SELECT c.customer_id, c.first_name, c.last_name, COUNT(r.rental_id) AS total_rentals
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
GROUP BY c.customer_id
ORDER BY total_rentals DESC
LIMIT 10;",가장 많은 대여 기록을 가진 상위 10명의 고객,"customer 테이블과 rental 테이블을 JOIN하여 각 customer_id별로 rental 횟수를 COUNT하고, 이를 total_rentals 열로 선택. 결과는 total_rentals 값을 기준으로 내림차순 정렬되어 출력",,O,,,,,,,,
"SELECT c.name AS category_name, AVG(f.rental_rate) AS avg_rental_rate
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name;",각 카테고리별 평균 대여 요금을 계산,"category, film_category, film 테이블을 JOIN하여 각 category_name별로 film의 rental_rate 값의 평균을 계산. 결과는 category_name과 해당 카테고리의 avg_rental_rate가 출력",,O,,,,,,,,
"SELECT EXTRACT(YEAR FROM r.rental_date) AS rental_year, COUNT(r.rental_id) AS total_rentals
FROM rental r
GROUP BY rental_year
ORDER BY rental_year;",연도별 렌털 건수를 집계,"EXTRACT 함수를 사용하여 rental_date에서 연도 정보만 추출하고, 이를 rental_year 열로 선택. 그룹화된 rental_year별로 rental_id 건수를 COUNT하여 total_rentals 열로 선택. 결과는 rental_year 순서대로 정렬되어 출력",,O,,,,,,,,
"SELECT st.store_id, c.city, COUNT(r.rental_id) AS total_rentals
FROM store st
JOIN staff s ON st.store_id = s.store_id
JOIN rental r ON s.staff_id = r.staff_id
JOIN address a ON st.address_id = a.address_id
JOIN city c ON a.city_id = c.city_id
GROUP BY st.store_id, c.city
ORDER BY total_rentals DESC;",각 매장과 도시별 렌털 건수를 집계,"store, staff, rental, address, city 테이블을 JOIN하여 store_id와 city별로 그룹화하고, 각 그룹에 대해 rental_id 건수를 COUNT하여 total_rentals 열로 선택. 결과는 total_rentals 값을 기준으로 내림차순 정렬되어 출력",,O,,,,,,,,
"SELECT c.first_name, c.last_name, COUNT(p.payment_id) AS total_payments, SUM(p.amount) AS total_amount
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN payment p ON r.rental_id = p.rental_id
GROUP BY c.customer_id
ORDER BY total_amount DESC
LIMIT 10;",지출이 가장 많은 상위 10명의 고객과 그들의 총 지출 금액을 조회,"customer, rental, payment 테이블을 JOIN하여 각 customer_id별로 payment 건수와 총 금액을 집계. 결과는 total_amount 값을 기준으로 내림차순 정렬되어 출력",,O,,,,,,,,
"SELECT c.name AS category_name, COUNT(DISTINCT f.film_id) AS num_films
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY num_films DESC;",각 카테고리에 속한 영화 수,"category, film_category, film 테이블을 JOIN하고, 각 category_name별로 DISTINCT film_id 값을 COUNT하여 num_films 열로 선택. 결과는 num_films 값을 기준으로 내림차순 정렬되어 출력",,O,,,,,,,,
"SELECT DATE_PART('month', r.rental_date) AS rental_month, DATE_PART('year', r.rental_date) AS rental_year, COUNT(r.rental_id) AS total_rentals
FROM rental r
GROUP BY rental_month, rental_year
ORDER BY rental_year, rental_month;","월별, 연도별 렌털 건수를 집계","DATE_PART 함수를 사용하여 rental_date에서 월과 연도 정보를 추출하고, 각각 rental_month와 rental_year 열로 선택. 그룹화된 rental_month와 rental_year별로 rental_id 건수를 COUNT하여 total_rentals 열로 선택. 결과는 rental_year, rental_month 순서대로 정렬되어 출력",,O,,,,,,,,
"SELECT a.district, COUNT(c.customer_id) AS num_customers
FROM address a
JOIN customer c ON a.address_id = c.address_id
GROUP BY a.district
ORDER BY num_customers DESC;",각 주소 지역(district)별 고객 수를 계산,"address와 customer 테이블을 JOIN하여 district별로 그룹화하고, 각 그룹에 대해 customer_id 건수를 COUNT하여 num_customers 열로 선택. 결과는 num_customers 값을 기준으로 내림차순 정렬되어 출력",,O,,,,,,,,
"SELECT f.rating, ROUND(AVG(f.length), 2) AS avg_length
FROM film f
GROUP BY f.rating
ORDER BY avg_length DESC;",각 등급(rating)별 평균 영화 길이를 계산,"film 테이블에서 rating별로 그룹화하고, 각 그룹에 대해 length 열의 평균값을 구하여 avg_length 열로 선택. ROUND 함수를 사용하여 avg_length 값을 소수점 이하 2자리까지 반올림. 결과는 avg_length 값을 기준으로 내림차순 정렬되어 출력",,O,,,,,,,,
"SELECT s.store_id, ci.city, COUNT(r.rental_id) AS total_rentals
FROM store s
JOIN address a ON s.address_id = a.address_id
JOIN city ci ON a.city_id = ci.city_id
JOIN staff st ON s.store_id = st.store_id
JOIN rental r ON st.staff_id = r.staff_id
GROUP BY s.store_id, ci.city
ORDER BY total_rentals DESC;",각 매장과 도시별 대여 건수를 계산,"store, address, city, staff, rental 테이블을 JOIN하여 store_id와 city별로 그룹화하고, 각 그룹에 대해 rental_id 건수를 COUNT하여 total_rentals 열로 선택. 결과는 total_rentals 값을 기준으로 내림차순 정렬되어 출력",,O,,,,,,,,
"SELECT c.name AS category_name, AVG(f.rental_rate) AS avg_rental_rate, AVG(f.length) AS avg_length
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY avg_rental_rate DESC;",각 카테고리별 평균 대여 요금과 평균 영화 길이를 계산,"category, film_category, film 테이블을 JOIN하여 각 category_name별로 film의 rental_rate와 length 열의 평균값을 계산. 결과는 avg_rental_rate 값을 기준으로 내림차순 정렬되어 출력",,O,,,,,,,,
"SELECT c.first_name, c.last_name, COUNT(DISTINCT r.staff_id) AS num_staff_served
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
GROUP BY c.customer_id
ORDER BY num_staff_served DESC
LIMIT 10;",가장 많은 직원으로부터 서비스를 받은 상위 10명의 고객,customer와 rental 테이블을 JOIN하여 각 customer_id별로 DISTINCT staff_id 값을 COUNT하여 num_staff_served 열로 선택. 결과는 num_staff_served 값을 기준으로 내림차순 정렬되어 출력,,O,,,,,,,,
"SELECT f.title, COUNT(r.rental_id) AS total_rentals, SUM(p.amount) AS total_revenue
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN payment p ON r.rental_id = p.rental_id
GROUP BY f.title
ORDER BY total_revenue DESC
LIMIT 5;",가장 수익을 많이 낸 상위 5개 영화와 그 수익 금액,"film, inventory, rental, payment 테이블을 JOIN하여 각 영화 제목(title)별로 렌털 횟수와 총 수익 금액을 집계. 결과는 total_revenue 값을 기준으로 내림차순 정렬되어 출력",,O,,,,,,,,
"SELECT c.name AS category_name, COUNT(DISTINCT ac.actor_id) AS num_actors
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
JOIN film_actor fa ON f.film_id = fa.film_id
JOIN actor ac ON fa.actor_id = ac.actor_id
GROUP BY c.name
ORDER BY num_actors DESC;",각 카테고리에 출연한 배우 수를 계산,"category, film_category, film, film_actor, actor 테이블을 JOIN하여 각 category_name별로 DISTINCT actor_id 값을 COUNT하여 num_actors 열로 선택. 결과는 num_actors 값을 기준으로 내림차순 정렬",,O,,,,,,,,
"SELECT c.country, COUNT(DISTINCT cu.customer_id) AS num_customers
FROM country c
JOIN city ci ON c.country_id = ci.country_id
JOIN address a ON ci.city_id = a.city_id
JOIN customer cu ON a.address_id = cu.address_id
GROUP BY c.country
ORDER BY num_customers DESC;",각 국가별 고객 수를 계산,"country, city, address, customer 테이블을 JOIN하여 각 country별로 DISTINCT customer_id 값을 COUNT하여 num_customers 열로 선택. 결과는 num_customers 값을 기준으로 내림차순 정렬되어 출력",,O,,,,,,,,
"SELECT DATE_PART('year', r.rental_date) AS rental_year, SUM(p.amount) AS total_revenue
FROM rental r
JOIN payment p ON r.rental_id = p.rental_id
GROUP BY rental_year
ORDER BY rental_year;",연도별 총 수익 금액을 계산,"rental과 payment 테이블을 JOIN하고, DATE_PART 함수를 사용하여 rental_date에서 연도 정보만 추출하여 rental_year 열로 선택. 그룹화된 rental_year별로 payment의 amount 열을 SUM하여 total_revenue 열로 선택. 결과는 rental_year 순서대로 정렬되어 출력",,O,,,,,,,,
"SELECT c.first_name, c.last_name, COUNT(r.rental_id) AS total_rentals, MAX(r.rental_date) AS last_rental_date
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
GROUP BY c.customer_id
ORDER BY total_rentals DESC
LIMIT 10;",가장 많은 대여 기록을 가진 상위 10명의 고객과 그들의 최신 대여 날짜,"customer와 rental 테이블을 JOIN하여 각 customer_id별로 rental 횟수를 COUNT하고, 최신 rental_date를 MAX 함수로 조회. 결과는 total_rentals 값을 기준으로 내림차순 정렬",,O,,,,,,,,
"SELECT f.rating, COUNT(DISTINCT f.language_id) AS num_languages
FROM film f
GROUP BY f.rating
ORDER BY num_languages DESC;",각 등급(rating)별로 사용된 언어 수를 계산,"film 테이블에서 rating별로 그룹화하고, 각 그룹에 대해 DISTINCT language_id 값을 COUNT하여 num_languages 열로 선택. 결과는 num_languages 값을 기준으로 내림차순 정렬되어 출력",,O,,,,,,,,
"SELECT st.store_id, ci.city, COUNT(DISTINCT c.customer_id) AS num_customers
FROM store st
JOIN staff s ON st.store_id = s.store_id
JOIN rental r ON s.staff_id = r.staff_id
JOIN customer c ON r.customer_id = c.customer_id
JOIN address a ON st.address_id = a.address_id
JOIN city ci ON a.city_id = ci.city_id
GROUP BY st.store_id, ci.city
ORDER BY num_customers DESC;",각 매장과 도시별 고유 고객 수를 계산,"store, staff, rental, customer, address, city 테이블을 JOIN하여 store_id와 city별로 그룹화하고, 각 그룹에 대해 DISTINCT customer_id 값을 COUNT하여 num_customers 열로 선택. 결과는 num_customers 값을 기준으로 내림차순 정렬되어 출력",,O,,,,,,,,
"SELECT c.name AS category_name, COUNT(DISTINCT f.film_id) AS num_films, AVG(f.length) AS avg_length
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY num_films DESC;",각 카테고리에 속한 영화 수와 평균 영화 길이를 계산,"category, film_category, film 테이블을 JOIN하고, 각 category_name별로 DISTINCT film_id 값을 COUNT하여 num_films 열로, 그리고 length 열의 평균값을 구하여 avg_length 열로 선택. 결과는 num_films 값을 기준으로 내림차순 정렬",,O,,,,,,,,
"SELECT c.first_name, c.last_name, COUNT(r.rental_id) AS total_rentals,
       AVG(r.return_date - r.rental_date) AS avg_rental_days
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY avg_rental_days DESC
LIMIT 10;
",대여 기간이 가장 긴 상위 10명의 고객과 그들의 평균 대여 기간,"각 고객별로 총 대여 횟수(total_rentals)와 평균 대여 기간(avg_rental_days)을 계산. PostgreSQL에서는 날짜 간의 차이를 직접 계산하여 평균 대여 기간을 조회. 또한, GROUP BY 절에는 customer_id와 함께 first_name, last_name도 포함. 결과는 평균 대여 일수에 따라 내림차순으로 정렬하고, 상위 10개의 결과만 반환",,O,,,,,,,,
"SELECT c.name AS category_name, COUNT(DISTINCT ac.actor_id) AS num_actors, COUNT(DISTINCT f.language_id) AS num_languages
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
JOIN film_actor fa ON f.film_id = fa.film_id
JOIN actor ac ON fa.actor_id = ac.actor_id
GROUP BY c.name
ORDER BY num_actors DESC, num_languages DESC;",각 카테고리에 출연한 배우 수와 사용된 언어 수를 계산,"category, film_category, film, film_actor, actor 테이블을 JOIN하여 각 category_name별로 DISTINCT actor_id 값을 COUNT하여 num_actors 열로, DISTINCT language_id 값을 COUNT하여 num_languages 열로 선택. 결과는 num_actors, num_languages 값을 기준으로 내림차순 정렬",,O,,,,,,,,
"SELECT c.first_name, c.last_name, COUNT(r.rental_id) AS total_rentals, SUM(p.amount) AS total_spent
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN payment p ON r.rental_id = p.rental_id
GROUP BY c.customer_id
ORDER BY total_spent DESC
LIMIT 10;","지출이 가장 많은 상위 10명의 고객과 그들의 총 지출 금액, 대여 횟수","customer, rental, payment 테이블을 JOIN하여 각 customer_id별로 대여 건수를 COUNT하고, payment의 amount 열을 SUM하여 총 지출 금액을 계산. 결과는 total_spent 값을 기준으로 내림차순 정렬",,O,,,,,,,,
"SELECT DATE_PART('month', r.rental_date) AS rental_month, DATE_PART('year', r.rental_date) AS rental_year, COUNT(DISTINCT c.customer_id) AS num_customers
FROM rental r
JOIN customer c ON r.customer_id = c.customer_id
GROUP BY rental_month, rental_year
ORDER BY rental_year, rental_month;","월별, 연도별 고유 고객 수를 집계","DATE_PART 함수를 사용하여 rental_date에서 월과 연도 정보를 추출하고, 각각 rental_month와 rental_year 열로 선택. 그룹화된 rental_month와 rental_year별로 DISTINCT customer_id 값을 COUNT하여 num_customers 열로 선택. 결과는 rental_year, rental_month 순서대로 정렬",,O,,,,,,,,
"SELECT c.country, COUNT(DISTINCT ci.city_id) AS num_cities, COUNT(DISTINCT cu.customer_id) AS num_customers
FROM country c
JOIN city ci ON c.country_id = ci.country_id
JOIN address a ON ci.city_id = a.city_id
JOIN customer cu ON a.address_id = cu.address_id
GROUP BY c.country
ORDER BY num_customers DESC;",각 국가별 도시 수와 고객 수를 계산,"country, city, address, customer 테이블을 JOIN하여 각 country별로 DISTINCT city_id 값을 COUNT하여 num_cities 열로, DISTINCT customer_id 값을 COUNT하여 num_customers 열로 선택. 결과는 num_customers 값을 기준으로 내림차순 정렬",,O,,,,,,,,
"SELECT f.title, COUNT(r.rental_id) AS total_rentals,
       AVG(r.return_date - r.rental_date) AS avg_rental_days
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY f.title
ORDER BY avg_rental_days DESC
LIMIT 10;",대여 기간이 가장 긴 상위 10개 영화와 그들의 평균 대여 기간,"film, inventory, rental 테이블을 조인하고, 각 영화 제목(f.title)별로 총 대여 횟수(total_rentals)와 평균 대여 일수(avg_rental_days)를 계산. avg_rental_days는 return_date에서 rental_date를 뺀 값의 평균. 결과는 평균 대여 일수에 따라 내림차순으로 정렬되며, 상위 10개의 결과만 표시",,O,,,,,,,,
"SELECT s.store_id, COUNT(DISTINCT r.customer_id) AS num_customers
FROM store s
JOIN staff st ON s.store_id = st.store_id
JOIN rental r ON st.staff_id = r.staff_id
GROUP BY s.store_id
ORDER BY num_customers DESC;",각 매장별 고유 고객 수를 계산,"store, staff, rental 테이블을 JOIN하여 각 store_id별로 DISTINCT customer_id 값을 COUNT하여 num_customers 열로 선택. 결과는 num_customers 값을 기준으로 내림차순 정렬",,O,,,,,,,,
"SELECT c.name AS category_name, COUNT(DISTINCT f.language_id) AS num_languages, COUNT(DISTINCT ac.last_name) AS num_last_names
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
JOIN film_actor fa ON f.film_id = fa.film_id
JOIN actor ac ON fa.actor_id = ac.actor_id
GROUP BY c.name
ORDER BY num_languages DESC, num_last_names DESC;",각 카테고리에서 사용된 언어 수와 배우 성씨 수를 계산,"category, film_category, film, film_actor, actor 테이블을 JOIN하여 각 category_name별로 DISTINCT language_id 값을 COUNT하여 num_languages 열로, DISTINCT last_name 값을 COUNT하여 num_last_names 열로 선택. 결과는 num_languages, num_last_names 값을 기준으로 내림차순 정렬",,O,,,,,,,,
"SELECT c.first_name, c.last_name, COUNT(r.rental_id) AS total_rentals, MAX(r.rental_date) AS last_rental_date, MIN(r.rental_date) AS first_rental_date
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
GROUP BY c.customer_id
ORDER BY total_rentals DESC
LIMIT 10;","가장 많은 대여 기록을 가진 상위 10명의 고객과 그들의 최신 대여 날짜, 최초 대여 날짜","customer와 rental 테이블을 JOIN하여 각 customer_id별로 대여 횟수를 COUNT하고, 최신 rental_date를 MAX 함수로, 최초 rental_date를 MIN 함수로 조회. 결과는 total_rentals 값을 기준으로 내림차순 정렬",,O,,,,,,,,
"SELECT c.name AS category_name, COUNT(DISTINCT f.rating) AS num_ratings
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY num_ratings DESC;","customer, rental, inventory 테이블을 JOIN하고, 각 customer_id별로 DISTINCT film_id 값을 COUNT하여 num_films_rented 열로 선택. 결과는 num_films_rented 값을 기준으로 내림차순 정렬되어 상위 10개 레코드만 출력","category, film_category, film 테이블을 JOIN하고, 각 category_name별로 DISTINCT rating 값을 COUNT하여 num_ratings 열로 선택. 결과는 num_ratings 값을 기준으로 내림차순 정렬",,O,,,,,,,,
"SELECT ac.first_name, ac.last_name, COUNT(DISTINCT f.film_id) AS num_films
FROM actor ac
JOIN film_actor fa ON ac.actor_id = fa.actor_id
JOIN film f ON fa.film_id = f.film_id
GROUP BY ac.actor_id
ORDER BY num_films DESC
LIMIT 10;",가장 많은 영화에 출연한 상위 10명의 배우와 그들의 출연 영화 수,"actor, film_actor, film 테이블을 JOIN하여 각 actor_id별로 DISTINCT film_id 값을 COUNT하여 num_films 열로 선택. 결과는 num_films 값을 기준으로 내림차순 정렬",,O,,,,,,,,
"SELECT f.rating, COUNT(DISTINCT ac.last_name) AS num_last_names
FROM film f
JOIN film_actor fa ON f.film_id = fa.film_id
JOIN actor ac ON fa.actor_id = ac.actor_id
GROUP BY f.rating
ORDER BY num_last_names DESC;",각 등급(rating)별 출연한 배우의 성씨 수를 계산,"film, film_actor, actor 테이블을 JOIN하고, 각 rating별로 그룹화하여 DISTINCT last_name 값을 COUNT하여 num_last_names 열로 선택. 결과는 num_last_names 값을 기준으로 내림차순 정렬",,O,,,,,,,,
"SELECT c.first_name, c.last_name, COUNT(DISTINCT r.staff_id) AS num_staff_served
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
GROUP BY c.customer_id
HAVING COUNT(DISTINCT r.staff_id) = (
    SELECT COUNT(DISTINCT staff_id)
    FROM staff
);",모든 직원으로부터 서비스를 받은 고객,"customer와 rental 테이블을 JOIN하고, 각 customer_id별로 DISTINCT staff_id 값을 COUNT. HAVING 절을 사용하여 COUNT 값이 staff 테이블의 DISTINCT staff_id 수와 같은 고객만 필터링",,O,,,,,,,,
"SELECT c.name AS category_name, COUNT(f.film_id) AS num_films, SUM(f.length) AS total_length
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY total_length DESC
LIMIT 1;","총 영화 길이가 가장 긴 카테고리와 그 카테고리의 영화 수, 총 영화 길이","category, film_category, film 테이블을 JOIN하고, 각 category_name별로 film_id 건수를 COUNT하여 num_films 열로, length 열의 합계를 구하여 total_length 열로 선택. 결과는 total_length 값을 기준으로 내림차순 정렬되어 상위 1개 레코드만 출력",,O,,,,,,,,
"SELECT ac.first_name, ac.last_name, COUNT(DISTINCT f.language_id) AS num_languages
FROM actor ac
JOIN film_actor fa ON ac.actor_id = fa.actor_id
JOIN film f ON fa.film_id = f.film_id
GROUP BY ac.actor_id
ORDER BY num_languages DESC
LIMIT 10;",가장 많은 언어로 출연한 상위 10명의 배우와 그들이 출연한 언어 수,"actor, film_actor, film 테이블을 JOIN하고, 각 actor_id별로 DISTINCT language_id 값을 COUNT하여 num_languages 열로 선택. 결과는 num_languages 값을 기준으로 내림차순 정렬되어 상위 10개 레코드만 출력",,O,,,,,,,,
"SELECT c.name AS category_name, COUNT(DISTINCT f.rating) AS num_ratings, MIN(f.rental_rate) AS min_rental_rate, MAX(f.rental_rate) AS max_rental_rate
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name;","각 카테고리별 영화 등급 수, 최소 대여 요금, 최대 대여 요금을 계산","category, film_category, film 테이블을 JOIN하고, 각 category_name별로 DISTINCT rating 값을 COUNT하여 num_ratings 열로, rental_rate 열의 최소값과 최대값을 각각 min_rental_rate, max_rental_rate 열로 선택",,O,,,,,,,,
"SELECT DATE_PART('year', r.rental_date) AS rental_year,
       SUM(p.amount) AS total_revenue,
       AVG(r.return_date - r.rental_date) AS avg_rental_days
FROM rental r
JOIN payment p ON r.rental_id = p.rental_id
GROUP BY DATE_PART('year', r.rental_date)
ORDER BY DATE_PART('year', r.rental_date);",연도별 총 수익 금액과 평균 대여 기간을 계산,"rental과 payment 테이블을 JOIN하고, DATE_PART 함수를 사용하여 rental_date에서 연도 정보만 추출하여 rental_year 열로 선택. 그룹화된 rental_year별로 payment의 amount 열을 SUM하여 total_revenue 열로, rental_date와 return_date 간의 일수 차이를 계산하여 평균을 구해 avg_rental_days 열로 선택. 결과는 rental_year 순서대로 정렬",,O,,,,,,,,
"SELECT c.first_name, c.last_name, COUNT(r.rental_id) AS total_rentals,
       MAX(r.return_date - r.rental_date) AS max_rental_days
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY max_rental_days DESC
LIMIT 10;",대여 기간이 가장 긴 상위 10명의 고객과 그들의 최대 대여 기간,"customer 테이블과 rental 테이블을 조인하고, 각 고객별로 총 대여 횟수(total_rentals)와 최대 대여 일수(max_rental_days)를 계산. max_rental_days는 return_date에서 rental_date를 뺀 값 중 최댓값. GROUP BY 절에서는 customer_id 뿐만 아니라 first_name과 last_name도 포함해야 하는데, 계산된 최대 대여 일수에 따라 내림차순으로 정렬하고, 상위 10명의 고객만을 선택",,O,,,,,,,,
"SELECT c.city, COUNT(DISTINCT a.address_id) AS num_addresses, COUNT(DISTINCT cu.customer_id) AS num_customers
FROM city c
JOIN address a ON c.city_id = a.city_id
JOIN customer cu ON a.address_id = cu.address_id
GROUP BY c.city
ORDER BY num_customers DESC;",각 도시별 주소 수와 고객 수,"city, address, customer 테이블을 JOIN하고, 각 city별로 그룹화하여 DISTINCT address_id 값을 COUNT하여 num_addresses 열로, DISTINCT customer_id 값을 COUNT하여 num_customers 열로 선택. 결과는 num_customers 값을 기준으로 내림차순 정렬",,O,,,,,,,,
"SELECT c.name AS category_name, COUNT(DISTINCT f.rating) AS num_ratings
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY num_ratings DESC;",각 카테고리에서 사용된 등급(rating) 수를 계산,"category, film_category, film 테이블을 JOIN하여 각 category_name별로 DISTINCT rating 값을 COUNT하여 num_ratings 열로 선택. 결과는 num_ratings 값을 기준으로 내림차순 정렬",,O,,,,,,,,
"SELECT c.country, COUNT(DISTINCT a.postal_code) AS num_postal_codes
FROM country c
JOIN city ci ON c.country_id = ci.country_id
JOIN address a ON ci.city_id = a.city_id
GROUP BY c.country
ORDER BY num_postal_codes DESC;",각 국가별 고유 우편번호 수를 계산,"country, city, address 테이블을 JOIN하여 각 country별로 DISTINCT postal_code 값을 COUNT하여 num_postal_codes 열로 선택. 결과는 num_postal_codes 값을 기준으로 내림차순 정렬",,O,,,,,,,,
"SELECT c.first_name, c.last_name, COUNT(DISTINCT st.staff_id) AS num_staff_served
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN staff st ON r.staff_id = st.staff_id
GROUP BY c.customer_id
ORDER BY num_staff_served DESC
LIMIT 10;",가장 많은 직원으로부터 서비스를 받은 상위 10명의 고객,"customer, rental, staff 테이블을 JOIN하여 각 customer_id별로 DISTINCT staff_id 값을 COUNT하여 num_staff_served 열로 선택. 결과는 num_staff_served 값을 기준으로 내림차순 정렬",,O,,,,,,,,
"SELECT DATE_PART('year', r.rental_date) AS rental_year, COUNT(DISTINCT c.customer_id) AS num_customers
FROM rental r
JOIN customer c ON r.customer_id = c.customer_id
GROUP BY rental_year
ORDER BY rental_year;",연도별 고유 고객 수를 집계," rental과 customer 테이블을 JOIN하고, DATE_PART 함수를 사용하여 rental_date에서 연도 정보만 추출하여 rental_year 열로 선택. 그룹화된 rental_year별로 DISTINCT customer_id 값을 COUNT하여 num_customers 열로 선택. 결과는 rental_year 순서대로 정렬",,O,,,,,,,,
"SELECT c.name AS category_name, COUNT(DISTINCT f.language_id) AS num_languages, COUNT(DISTINCT ac.last_name) AS num_last_names
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
LEFT JOIN film_actor fa ON f.film_id = fa.film_id
LEFT JOIN actor ac ON fa.actor_id = ac.actor_id
GROUP BY c.name
ORDER BY num_languages DESC, num_last_names DESC;",각 카테고리에서 사용된 언어 수와 배우 성씨 수를 계산,"category, film_category, film 테이블과 film_actor, actor 테이블을 LEFT JOIN하여 각 category_name별로 DISTINCT language_id 값을 COUNT하여 num_languages 열로, DISTINCT last_name 값을 COUNT하여 num_last_names 열로 선택. 결과는 num_languages, num_last_names 값을 기준으로 내림차순 정렬",,O,,,,,,,,
"SELECT c.first_name, c.last_name, COUNT(r.rental_id) AS total_rentals,
       SUM(p.amount) AS total_spent,
       AVG(r.return_date - r.rental_date) AS avg_rental_days
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN payment p ON r.rental_id = p.rental_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY total_spent DESC
LIMIT 10;
","지출이 가장 많은 상위 10명의 고객과 그들의 총 지출 금액, 대여 횟수, 평균 대여 기간","고객별로 총 대여 횟수(total_rentals), 총 지출 금액(total_spent), 그리고 평균 대여 일수(avg_rental_days)를 계산. avg_rental_days는 return_date에서 rental_date를 뺀 결과의 평균값. 결과는 총 지출 금액(total_spent)에 따라 내림차순으로 정렬되며, 상위 10명의 고객을 표시",,O,,,,,,,,
"SELECT s.store_id, COUNT(DISTINCT r.customer_id) AS num_customers, COUNT(DISTINCT f.film_id) AS num_films_rented
FROM store s
JOIN staff st ON s.store_id = st.store_id
JOIN rental r ON st.staff_id = r.staff_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
GROUP BY s.store_id
ORDER BY num_customers DESC, num_films_rented DESC;",각 매장별 고유 고객 수와 대여된 고유 영화 수를 계산,"store, staff, rental, inventory, film 테이블을 JOIN하여 각 store_id별로 DISTINCT customer_id 값을 COUNT하여 num_customers 열로, DISTINCT film_id 값을 COUNT하여 num_films_rented 열로 선택. 결과는 num_customers, num_films_rented 값을 기준으로 내림차순 정렬",,O,,,,,,,,
"SELECT c.first_name, c.last_name, COUNT(DISTINCT f.rating) AS num_ratings_rented
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
GROUP BY c.customer_id
ORDER BY num_ratings_rented DESC
LIMIT 10;",가장 다양한 등급의 영화를 대여한 상위 10명의 고객,"customer, rental, inventory, film 테이블을 JOIN하여 각 customer_id별로 DISTINCT rating 값을 COUNT하여 num_ratings_rented 열로 선택. 결과는 num_ratings_rented 값을 기준으로 내림차순 정렬",,O,,,,,,,,
"SELECT c.city, COUNT(DISTINCT a.address_id) AS num_addresses, COUNT(DISTINCT cu.customer_id) AS num_customers
FROM city c
JOIN address a ON c.city_id = a.city_id
JOIN customer cu ON a.address_id = cu.address_id
GROUP BY c.city
ORDER BY num_customers DESC;",각 도시별 주소 수와 고객 수,"city, address, customer 테이블을 JOIN하고, 각 city별로 그룹화하여 DISTINCT address_id 값을 COUNT하여 num_addresses 열로, DISTINCT customer_id 값을 COUNT하여 num_customers 열로 선택. 결과는 num_customers 값을 기준으로 내림차순 정렬",,O,,,,,,,,
"SELECT c.name AS category_name, AVG(f.rental_rate) AS avg_rental_rate, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY f.rental_rate) AS median_rental_rate
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name;",각 카테고리별 평균 대여 요금과 중앙값 대여 요금,"category, film_category, film 테이블을 JOIN하고, 각 category_name별로 rental_rate 열의 평균값을 구하여 avg_rental_rate 열로, PERCENTILE_CONT 함수를 사용하여 rental_rate의 중앙값을 구하여 median_rental_rate 열로 선택",,O,,,,,,,,
"SELECT c.first_name, c.last_name, COUNT(DISTINCT i.film_id) AS num_films_rented
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
GROUP BY c.customer_id
ORDER BY num_films_rented DESC
LIMIT 10;",가장 많은 종류의 영화를 대여한 상위 10명의 고객과 그들이 대여한 영화 수,"customer, rental, inventory 테이블을 JOIN하고, 각 customer_id별로 DISTINCT film_id 값을 COUNT하여 num_films_rented 열로 선택. 결과는 num_films_rented 값을 기준으로 내림차순 정렬되어 상위 10개 레코드만 출력",,O,,,,,,,,
"SELECT c.name AS category_name, COUNT(DISTINCT f.rating) AS num_ratings, COUNT(DISTINCT f.language_id) AS num_languages
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY num_ratings DESC, num_languages DESC;",각 카테고리별 영화 등급 수와 언어 수를 계산,"category, film_category, film 테이블을 JOIN하고, 각 category_name별로 DISTINCT rating 값을 COUNT하여 num_ratings 열로, DISTINCT language_id 값을 COUNT하여 num_languages 열로 선택. 결과는 num_ratings, num_languages 값을 기준으로 내림차순 정렬",,O,,,,,,,,
"SELECT ac.first_name, ac.last_name, COUNT(DISTINCT f.rating) AS num_ratings
FROM actor ac
JOIN film_actor fa ON ac.actor_id = fa.actor_id
JOIN film f ON fa.film_id = f.film_id
GROUP BY ac.actor_id
ORDER BY num_ratings DESC
LIMIT 10;",가장 다양한 등급의 영화에 출연한 상위 10명의 배우와 그들이 출연한 영화 등급 수,"actor, film_actor, film 테이블을 JOIN하고, 각 actor_id별로 DISTINCT rating 값을 COUNT하여 num_ratings 열로 선택. 결과는 num_ratings 값을 기준으로 내림차순 정렬되어 상위 10개 레코드만 출력",,O,,,,,,,,
"SELECT c.name AS category_name, COUNT(DISTINCT f.film_id) AS num_films, SUM(f.length) AS total_length, AVG(f.length) AS avg_length
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY total_length DESC
LIMIT 5;","총 영화 길이가 가장 긴 상위 5개 카테고리와 그 카테고리들의 영화 수, 총 영화 길이, 평균 영화 길이","category, film_category, film 테이블을 JOIN하고, 각 category_name별로 DISTINCT film_id 건수를 COUNT하여 num_films 열로, length 열의 합계를 구하여 total_length 열로, 평균값을 구하여 avg_length 열로 선택. 결과는 total_length 값을 기준으로 내림차순 정렬되어 상위 5개 레코드만 출력",,O,,,,,,,,
"SELECT ac.first_name, ac.last_name, COUNT(DISTINCT f.rating) AS num_ratings, COUNT(DISTINCT f.language_id) AS num_languages
FROM actor ac
JOIN film_actor fa ON ac.actor_id = fa.actor_id
JOIN film f ON fa.film_id = f.film_id
GROUP BY ac.actor_id
ORDER BY num_ratings DESC, num_languages DESC
LIMIT 10;","가장 다양한 등급과 언어의 영화에 출연한 상위 10명의 배우와 그들이 출연한 영화 등급 수, 언어 수","actor, film_actor, film 테이블을 JOIN하고, 각 actor_id별로 DISTINCT rating 값을 COUNT하여 num_ratings 열로, DISTINCT language_id 값을 COUNT하여 num_languages 열로 선택. 결과는 num_ratings, num_languages 값을 기준으로 내림차순 정렬되어 상위 10개 레코드만 출력",,O,,,,,,,,
"SELECT c.first_name, c.last_name, COUNT(DISTINCT r.staff_id) AS num_staff_served, COUNT(DISTINCT a.district) AS num_districts_visited
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN staff s ON r.staff_id = s.staff_id
JOIN address a ON s.address_id = a.address_id
GROUP BY c.customer_id
ORDER BY num_staff_served DESC, num_districts_visited DESC
LIMIT 10;","가장 많은 직원으로부터 서비스를 받고, 가장 많은 지역을 방문한 상위 10명의 고객","customer, rental, staff, address 테이블을 JOIN하고, 각 customer_id별로 DISTINCT staff_id 값을 COUNT하여 num_staff_served 열로, DISTINCT district 값을 COUNT하여 num_districts_visited 열로 선택. 결과는 num_staff_served, num_districts_visited 값을 기준으로 내림차순 정렬되어 상위 10개 레코드만 출력",,O,,,,,,,,